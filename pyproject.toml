# pyproject.toml

[project]
name = "chat-ai" # Choose a suitable name
version = "0.1.0"
description = "Multi-model intelligent chat application with RAG and Agent capabilities."
authors = [{name = "DemonsL", email = "demonsl@example.com"}]
readme = "README.md"
license = {text = "MIT"} # Or your chosen license
requires-python = ">=3.11"

dependencies = [
    # --- Core Framework ---
    "fastapi>=0.111.0", # Current stable FastAPI
    "uvicorn[standard]>=0.29.0", # ASGI server with standard extras
    "pydantic[email]>=2.7.1", # Pydantic v2 with email validation
    "pydantic-settings>=2.2.1", # For loading config from .env

    # --- Utility ---
    "python-multipart>=0.0.9", # For file uploads in FastAPI
    "python-dotenv>=1.0.1", # Environment variable loading
    "httpx>=0.27.0", # HTTP client

    # --- Database (SQL) ---
    "sqlalchemy[asyncio]>=2.0.30", # SQLAlchemy v2 with asyncio support
    "asyncpg>=0.29.0", # Async driver for PostgreSQL
    "psycopg[binary]>=3.1.0",
    "alembic>=1.13.1", # For database migrations
    "greenlet>=3.0.3", # SQLAlchemy async support

    # --- Database (Vector) ---
    # Choose one or both depending on your needs. langchain-community often needed for Chroma.
    "chromadb>=0.5.0",
    # "pinecone-client>=4.1.0", # Uncomment if using Pinecone

    # --- Database (Cache) ---
    "redis>=5.0.4", # Async Redis client (replaces aioredis)

    # --- Database (NoSQL - Optional) ---
    # "motor>=3.4.0", # Async driver for MongoDB (Uncomment if using MongoDB)

    # --- LLM / LangChain ---
    "langchain>=0.2.1", # Core LangChain library
    "langchain-core>=0.3.52", # LangChain core
    "langchain-openai>=0.1.7", # OpenAI specific integrations
    "langchain-anthropic>=0.1.11", # Anthropic specific integrations
    "langchain-community>=0.2.1", # Community integrations (often needed for vector stores like Chroma)
    "langchain-chroma>=0.2.1", # Chroma integration
    "langchain-google-genai>=2.0.11", # Google AI integration
    "langchain-deepseek>=0.1.2", # DeepSeek integration
    "langgraph>=0.3.21", # LangGraph
    "langgraph-checkpoint-postgres>=2.0.2", # PostgreSQL checkpointer
    "dashscope>=1.23.4",

    # --- Authentication ---
    "python-jose[cryptography]>=3.3.0", # For JWT handling
    "passlib[bcrypt]>=1.7.4", # For password hashing

    # --- File Processing ---
    "pypdf>=4.2.0", # For PDF text extraction
    "python-docx>=1.1.2", # For DOCX text extraction
    "pytesseract>=0.3.10", # OCR wrapper (Requires Tesseract OCR engine installed on the system)
    "pillow>=10.3.0", # Image handling library (often needed with OCR)

    # --- Logging & Monitoring ---
    "loguru>=0.7.2", # Advanced logging library
    "sentry-sdk>=2.14.0", # Error monitoring
    "prometheus-client>=0.21.0", # Metrics monitoring
    "starlette-exporter>=0.23.0", # Starlette metrics exporter

    # --- Background Tasks (Optional - Choose one if needed beyond FastAPI BackgroundTasks) ---
    "celery>=5.4.0", # Celery for background tasks
    "flower>=2.0.1", # Celery monitoring tool
    "kombu>=5.3.0", # Celery message transport
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.1", # Testing framework
    "pytest-asyncio>=0.23.7", # For testing async code with pytest
    "pytest-cov>=6.1.0", # Test coverage
    "httpx>=0.27.0", # Async HTTP client for testing API endpoints
    "pytest-mock>=3.12.0", # Mocking library fixture for pytest
    "ruff>=0.4.4", # Fast linter and formatter
    "black>=24.8.0", # Code formatter
    "isort>=5.13.2", # Import sorter
    "flake8>=7.1.1", # Code linter
    "mypy>=1.10.0", # Static type checker
    "pre-commit>=3.7.0", # For running checks before commits (optional but recommended)
    "types-redis>=4.6.0", # Type hints for redis
    # Add other type hints as needed, e.g., types-passlib, types-python-jose
]

[tool.uv]
index-url = "https://mirrors.aliyun.com/pypi/simple"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# --- Tool Configurations (Optional but Recommended) ---

[tool.ruff]
line-length = 88
select = ["E", "W", "F", "I", "UP", "C4", "B", "A", "RUF"] # Select rule sets (adjust as needed)
ignore = ["E501"] # Ignore line length errors (handled by formatter)

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Can be strict later by removing this
# Add plugins if needed, e.g., for Pydantic or SQLAlchemy